#include <iostream>
#include <vector>
using namespace std;

// Find maximum profit earned from at most `k` stock transactions.
// Input to the function is stock prices of `n` days and positive number `k`
int findMaxProfit(vector<int> const &price, int k)
{
	// get the number of days `n`
	int n = price.size();

	// base case
	if (n <= 1)
	{
		return 0;
	}

	// profit[i][j] stores the maximum profit gained by doing
	// at most `i` transactions till j'th day
	int profit[k + 1][n];

	// fill profit[][] in a bottom-up fashion
	for (int i = 0; i <= k; i++)
	{
		for (int j = 0; j < n; j++)
		{
			// profit is 0 when:
			// i = 0, i.e., for 0th day
			// j = 0, i.e., no transaction is being performed

			if (i == 0 || j == 0)
			{
				profit[i][j] = 0;
			}
			else
			{
				int max_so_far = 0;
				for (int k = 0; k < j; k++)
				{
					int curr_price = price[j] - price[k] + profit[i - 1][k];
					if (max_so_far < curr_price)
					{
						max_so_far = curr_price;
					}
				}

				profit[i][j] = max(profit[i][j - 1], max_so_far);
			}
		}
	}

	return profit[k][n - 1];
}

int main()
{
    
	vector<int>price1 = { 3, 3, 5, 0, 0, 3, 1, 4 };

	int k1 = 2;

	cout << "The maximum possible profit is " << findMaxProfit(price1, k1);
	vector<int>price2= { 1,2,3,4,5};

	int k2= 2;

	cout << "\nThe maximum possible profit is " << findMaxProfit(price2, k2);
	vector<int>price3= { 7,6,4,3,1};

	int k3= 2;

	cout << "\nThe maximum possible profit is " << findMaxProfit(price3, k3);
	

	return 0;
}